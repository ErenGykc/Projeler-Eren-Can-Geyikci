Eren Can Geyikci-20181121038 
Soru18: Project Euler

/* 
	public final class p018 implements EulerSolution {
		
		public static void main(String[] args) {
			System.out.println(new p018().run());
		}
		
		
		/* 
		 * We create a new blank triangle with the same dimensions as the original big triangle.
		 * For each cell of the big triangle, we consider the sub-triangle whose top is at this cell,
		 * calculate the maximum path sum when starting from this cell, and store the result
		 * in the corresponding cell of the blank triangle.
		 * 
		 * If we start at a particular cell, what is the maximum path total? If the cell is at the
		 * bottom of the big triangle, then it is simply the cell's value. Otherwise the answer is
		 * the cell's value plus either {the maximum path total of the cell down and to the left}
		 * or {the maximum path total of the cell down and to the right}, whichever is greater.
		 * By computing the blank triangle's values from bottom up, the dependent values are always
		 * computed before they are utilized. This technique is known as dynamic programming.
		 */
		
		public String run() {
			for (int i = triangle.length - 2; i >= 0; i--) {
				for (int j = 0; j < triangle[i].length; j++)
					triangle[i][j] += Math.max(triangle[i + 1][j], triangle[i + 1][j + 1]);
			}
			return Integer.toString(triangle[0][0]);
		}
		
		
		private int[][] triangle = {  // Mutable
			{75},
			{95,64},
			{17,47,82},
			{18,35,87,10},
			{20, 4,82,47,65},
			{19, 1,23,75, 3,34},
			{88, 2,77,73, 7,63,67},
			{99,65, 4,28, 6,16,70,92},
			{41,41,26,56,83,40,80,70,33},
			{41,48,72,33,47,32,37,16,94,29},
			{53,71,44,65,25,43,91,52,97,51,14},
			{70,11,33,28,77,73,17,78,39,68,17,57},
			{91,71,52,38,17,14,91,43,58,50,27,29,48},
			{63,66, 4,68,89,53,67,30,73,16,69,87,40,31},
			{ 4,62,98,27,23, 9,70,98,73,93,38,53,60, 4,23},
		};
		
	}


Soru 18 cevap: 1074

Eren Can Geyikci-20181121038 
Soru28: Project Euler

/* 
	 * Solution to Project Euler problem 28
	 * Copyright (c) Project Nayuki. All rights reserved.
	 * 
	 * https://www.nayuki.io/page/project-euler-solutions
	 * https://github.com/nayuki/Project-Euler-solutions
	 */
	

	

	public final class p028 implements EulerSolution {
		
		public static void main(String[] args) {
			System.out.println(new p028().run());
		}
		
		
		/* 
		 * From the diagram, let's observe the four corners of an n * n square (where n is odd).
		 * It's not hard to convince yourself that the top right corner always has the value n^2.
		 * Working counterclockwise (backwards), the top left corner has the value n^2 - (n - 1),
		 * the bottom left corner has the value n^2 - 2(n - 1), and the bottom right is n^2 - 3(n - 1).
		 * Putting it all together, this outermost ring contributes 4n^2 - 6(n - 1) to the final sum.
		 * 
		 * Incidentally, the closed form of this sum is (4m^3 + 3m^2 + 8m - 9) / 6, where m = size.
		 */
		private static final int SIZE = 1001;  // Must be odd
		
		public String run() {
			long sum = 1;  // Special case for size 1
			for (int n = 3; n <= SIZE; n += 2)
				sum += 4 * n * n - 6 * (n - 1);
			return Long.toString(sum);
		}
		
	}



Soru 28 Cevap: 669171001
